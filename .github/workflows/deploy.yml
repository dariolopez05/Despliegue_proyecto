name: Deploy Symfony API with MySQL and Nginx

on:
  push:
    branches:
      - '*'  # Se ejecutar치 en cualquier rama

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c칩digo
        uses: actions/checkout@v4

      - name: Iniciar sesi칩n en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construir y subir imagen Symfony
      - name: Construir y subir imagen Symfony
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest -f .docker/php.Dockerfile ./ 
          docker push ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest

      # Construir y subir imagen Nginx
      - name: Construir y subir imagen Nginx
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest -f .docker/nginx.Dockerfile ./ 
          docker push ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout c칩digo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Verificar estructura del repositorio
        run: ls -R

      - name: Verificar que el archivo compose.yml existe
        run: ls -l compose.yml

      # Crear el archivo de clave privada temporalmente para usar con SSH
      - name: Crear archivo de clave privada temporal
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Agregar el servidor remoto a known_hosts
      - name: Agregar el servidor remoto a known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Instalar Docker y Docker Compose en el servidor remoto
      - name: Instalar Docker y Docker Compose en el servidor remoto
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            docker --version
            docker compose version
          EOF

      # Transferir el archivo compose.yml al servidor remoto
      - name: Transferir el archivo compose.yml al servidor remoto
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          source: compose.yml  # Ruta corregida
          target: ~/deploy/
          debug: true
          strip_components: 1
          timeout: 120s

      - name: Verificar archivo compose.yml en el servidor remoto
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'ls -l ~/deploy/compose.yml'

      - name: Desplegar en servidor remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            sudo chmod 666 /var/run/docker.sock
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            docker compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml pull
            docker compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml down
            docker compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml up -d --force-recreate

      - name: Verificar logs del contenedor PHP
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            docker logs symfony_app

      - name: Crear la base de datos si no existe y ejecutar migraciones
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            docker exec symfony_app php bin/console doctrine:database:create --if-not-exists
            docker exec symfony_app php bin/console doctrine:migrations:migrate --no-interaction

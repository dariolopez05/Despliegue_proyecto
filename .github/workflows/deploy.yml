name: Deploy Symfony API with MySQL and Nginx

on:
    push:
        branches:
            - '*'  # El flujo de trabajo se ejecutará para cualquier rama

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout código
              uses: actions/checkout@v4

            - name: Iniciar sesión en Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            # Construir y subir imagen Symfony
            - name: Construir y subir imagen Symfony
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest -f .docker/php.Dockerfile ./ 
                  docker push ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest

            # Construir y subir imagen Nginx
            - name: Construir y subir imagen Nginx
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest -f .docker/nginx.Dockerfile ./ 
                  docker push ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Checkout código
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.ref }}  # Asegura que se use la rama que ha hecho el push

            - name: Verificar estructura del repositorio
              run: |
                  echo "Directorio actual: $(pwd)"
                  ls -R  # Esto te ayudará a comprobar la estructura y las rutas de tus archivos

            # Asegurarse de que el archivo compose.yml se transfiere desde el lugar correcto
            - name: Verificar archivo compose.yml localmente
              run: |
                  echo "Archivo compose.yml en local:"
                  ls -l ${GITHUB_WORKSPACE}/despliegue/src/compose.yml  # Verifica que el archivo existe localmente

            - name: Transferir el archivo compose.yml al servidor remoto
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  source: ${{ github.workspace }}src/compose.yml
                  target: ~/deploy/
                  strip_components: 4  # Ajustar para que se copie correctamente al directorio remoto
                  port: 22  # Ajuste para puerto, si es necesario

            - name: Verificar archivo compose.yml en el servidor remoto
              run: |
                  ssh -i ${{ secrets.REMOTE_KEY }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'ls -l ~/deploy/compose.yml'
                  # Si el archivo no existe en el servidor remoto, este paso fallará y proporcionará más información

            - name: Desplegar en servidor remoto
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  script: |
                      sudo chmod 666 /var/run/docker.sock
                      echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

                      docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml pull
                      docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml down
                      docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml up -d --force-recreate

            - name: Crear la base de datos si no existe y ejecutar migraciones
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  script: |
                      docker exec symfony_app php bin/console doctrine:database:create --if-not-exists
                      docker exec symfony_app php bin/console doctrine:migrations:migrate --no-interaction

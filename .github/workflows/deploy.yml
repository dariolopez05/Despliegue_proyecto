name: Deploy Symfony API with MySQL and Nginx

on:
  push:
    branches:
      - '*'  # El flujo de trabajo se ejecutará para cualquier rama

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Iniciar sesión en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construir y subir imagen Symfony
      - name: Construir y subir imagen Symfony
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest -f .docker/php.Dockerfile ../src 
          docker push ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest

      # Construir y subir imagen Nginx
      - name: Construir y subir imagen Nginx
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest -f .docker/nginx.Dockerfile ../src 
          docker push ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # Asegura que se use la rama que ha hecho el push

      - name: Verificar estructura del repositorio
        run: |
          echo "Directorio actual: $(pwd)"
          ls -R  # Esto te ayudará a comprobar la estructura y las rutas de tus archivos

      - name: Verificar que el archivo compose.yml existe
        run: |
          echo "Revisando el archivo compose.yml"
          ls -l src/compose.yml  # Verifica que el archivo esté presente en la ruta esperada

      # Crear el archivo de clave privada temporalmente para usar con SSH
      - name: Crear archivo de clave privada temporal
        run: |
          mkdir -p ~/.ssh  # Crear el directorio .ssh si no existe
          echo "${{ secrets.REMOTE_KEY }}" > ~/.ssh/id_rsa  # Crear el archivo con la clave privada
          chmod 600 ~/.ssh/id_rsa  # Asegura que la clave tenga los permisos correctos

      # Agregar la huella digital del servidor remoto a known_hosts para evitar "Host key verification failed"
      - name: Agregar el servidor remoto a known_hosts
        run: |
          mkdir -p ~/.ssh  # Asegura que .ssh exista
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} -v >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts  # Ajusta los permisos del archivo known_hosts

      # Instalar Docker y Docker Compose en el servidor remoto
      - name: Instalar Docker y Docker Compose en el servidor remoto
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            # Instalar Docker
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce

            # Instalar Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Verificar instalación
            docker --version
            docker-compose --version
          EOF

      # Asegurarse de que el archivo compose.yml se transfiere desde el lugar correcto
      - name: Transferir el archivo compose.yml al servidor remoto
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          source: src/compose.yml  # Ruta correcta al archivo compose.yml
          target: ~/deploy/
          debug: true  # Habilitar depuración para obtener más detalles sobre el proceso de transferencia
          strip_components: 1  # Ajuste para eliminar los directorios innecesarios durante la transferencia
          timeout: 120s  # Aumentar el timeout a 120 segundos

      - name: Verificar archivo compose.yml en el servidor remoto
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'ls -l ~/deploy/compose.yml'

      - name: Desplegar en servidor remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            sudo chmod 666 /var/run/docker.sock
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml pull
            docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml down
            docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml up -d --force-recreate

      - name: Crear la base de datos si no existe y ejecutar migraciones
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            docker exec symfony_app php bin/console doctrine:database:create --if-not-exists
            docker exec symfony_app php bin/console doctrine:migrations:migrate --no-interaction
